import os
import glob
import subprocess
import time
import sys
from pathlib import Path
import whisper
from tqdm import tqdm
import threading

# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
# pip install openai-whisper ffmpeg-python tqdm

def get_video_duration(video_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –ø–æ–º–æ—â—å—é ffprobe
    """
    command = [
        "ffprobe", 
        "-v", "error", 
        "-show_entries", "format=duration", 
        "-of", "default=noprint_wrappers=1:nokey=1", 
        video_path
    ]
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    try:
        return float(result.stdout.strip())
    except (ValueError, IndexError):
        return 0

def extract_audio(video_path, output_audio_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é ffmpeg —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    print(f"üé¨ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∞—É–¥–∏–æ –∏–∑ {video_path}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
    duration = get_video_duration(video_path)
    if duration <= 0:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º ffmpeg –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        command = [
            "ffmpeg", 
            "-i", video_path,
            "-q:a", "0",
            "-map", "a",
            "-y",
            output_audio_path
        ]
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    else:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = tqdm(total=100, desc="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ", 
                          unit="%", bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ ffmpeg
        command = [
            "ffmpeg", 
            "-i", video_path,
            "-q:a", "0",
            "-map", "a",
            "-y",
            "-progress", "pipe:1",  # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ stdout
            output_audio_path
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = subprocess.Popen(
            command, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE, 
            universal_newlines=True
        )
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        for line in process.stdout:
            if line.startswith("out_time_ms="):
                try:
                    time_ms = float(line.split("=")[1].strip())
                    current_time = time_ms / 1000000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                    progress = min(int((current_time / duration) * 100), 100)
                    progress_bar.update(progress - progress_bar.n)
                except (ValueError, IndexError):
                    pass
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        process.wait()
        progress_bar.close()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if os.path.exists(output_audio_path):
        print(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –≤ {output_audio_path}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ.")
        sys.exit(1)

def estimate_audio_duration(audio_path):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    command = [
        "ffprobe", 
        "-v", "error", 
        "-show_entries", "format=duration", 
        "-of", "default=noprint_wrappers=1:nokey=1", 
        audio_path
    ]
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    try:
        return float(result.stdout.strip())
    except (ValueError, IndexError):
        return 0

class TranscriptionProgressTracker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è callback
    """
    def __init__(self, audio_duration):
        self.audio_duration = audio_duration
        self.progress_bar = None
        self.running = True
        self.temp_file = None
        self.last_size = 0
        
    def start_tracking(self, model, temp_file):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        """
        self.temp_file = temp_file
        self.progress_bar = tqdm(total=100, desc="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏", 
                               unit="%", bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}")
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ whisper_state.csv –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            thread = threading.Thread(target=self._track_progress)
            thread.daemon = True
            thread.start()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return None
        
        return self.progress_bar
    
    def _track_progress(self):
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø—Ä–æ–≤–µ—Ä—è—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Whisper
        """
        # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = 0
        last_update = time.time()
        
        while self.running and progress < 100:
            time.sleep(0.5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä
            if self.temp_file and os.path.exists(self.temp_file):
                current_size = os.path.getsize(self.temp_file)
                if current_size > self.last_size:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                    self.last_size = current_size
                    progress += 1
                    self.progress_bar.update(1)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É
                current_time = time.time()
                if current_time - last_update >= 1.0:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    progress += 1
                    self.progress_bar.update(1 if progress <= 95 else 0)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ 95%
                    last_update = current_time
            
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ 100%
            if progress > 100:
                progress = 100
                
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ü–∏–∫–ª–∞
        if self.progress_bar:
            self.progress_bar.update(100 - self.progress_bar.n)  # –î–æ—Å—Ç–∏–≥–∞–µ–º 100%
    
    def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        self.running = False
        if self.progress_bar:
            self.progress_bar.close()

def transcribe_audio(audio_path, output_text_path):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper (medium)
    —Å —ç–º—É–ª—è—Ü–∏–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    print(f"üé§ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper (medium)...")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    with tqdm(total=1, desc="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", unit="—à–∞–≥") as progress_bar:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º medium –º–æ–¥–µ–ª—å
        model = whisper.load_model("medium")
        progress_bar.update(1)
    
    print(f"üéß –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∞—É–¥–∏–æ {audio_path}...")
    
    # –û—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    audio_duration = estimate_audio_duration(audio_path)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    temp_file = f"{output_text_path}.tmp"
    if os.path.exists(temp_file):
        os.remove(temp_file)
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_tracker = TranscriptionProgressTracker(audio_duration)
    progress_tracker.start_tracking(model, temp_file)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        result = model.transcribe(audio_path, verbose=False)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        with open(temp_file, "w", encoding="utf-8") as f:
            f.write("1" * 100)  # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        transcription = result["text"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with open(output_text_path, "w", encoding="utf-8") as text_file:
            text_file.write(transcription)
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_tracker.stop()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        print(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_text_path}")
        return transcription
    
    except Exception as e:
        progress_tracker.stop()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
        if os.path.exists(temp_file):
            os.remove(temp_file)
        raise

def main():
    start_time = time.time()
    
    print("üîç –ò—â–µ–º MP4 —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    # –ù–∞–π—Ç–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π mp4 —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mp4_files = glob.glob("*.mp4")
    
    if not mp4_files:
        print("‚ùå –û—à–∏–±–∫–∞: MP4 —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")
        return
    
    if len(mp4_files) > 1:
        print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ MP4 —Ñ–∞–π–ª–æ–≤. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π: {mp4_files[0]}")
    
    video_path = mp4_files[0]
    base_name = Path(video_path).stem
    
    # –ü—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    audio_path = f"{base_name}.mp3"
    text_path = f"{base_name}_transcription.txt"
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    extract_audio(video_path, audio_path)
    
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å —ç–º—É–ª—è—Ü–∏–µ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    transcription = transcribe_audio(audio_path, text_path)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_time = time.time() - start_time
    minutes, seconds = divmod(total_time, 60)
    
    print("\n" + "="*60)
    print(f"üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {int(minutes)} –º–∏–Ω {int(seconds)} —Å–µ–∫!")
    print(f"üìÇ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {video_path}")
    print(f"üéµ –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ: {audio_path}")
    print(f"üìù –§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {text_path}")
    print(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.getsize(text_path)} –±–∞–π—Ç")
    print("-"*60)
    print("üìå –ü–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
    print(transcription[:150] + "..." if len(transcription) > 150 else transcription)
    print("="*60)

if __name__ == "__main__":
    main()
